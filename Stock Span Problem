Design an algorithm that collects daily price quotes for some stock and returns the span of that stock's price for the current day.

The span of the stock's price in one day is the maximum number of consecutive days (starting from that day and going backward) for which the stock price was less than or equal to the price of that day.

For example, if the prices of the stock in the last four days is [7,2,1,2] and the price of the stock today is 2, then the span of today is 4 because starting from today, the price of the stock was less than or equal 2 for 4 consecutive days.
Also, if the prices of the stock in the last four days is [7,34,1,2] and the price of the stock today is 8, then the span of today is 3 because starting from today, the price of the stock was less than or equal 8 for 3 consecutive days.
Implement the StockSpanner class:

StockSpanner() Initializes the object of the class.
int next(int price) Returns the span of the stock's price given that today's price is price.
 

Example 1:

Input
["StockSpanner", "next", "next", "next", "next", "next", "next", "next"]
[[], [100], [80], [60], [70], [60], [75], [85]]
Output
[null, 1, 1, 1, 2, 1, 4, 6]

# SOLUTIONS

# 1
import java.util.Stack;

class StockSpanner {
    Stack<Integer> prices;
    Stack<Integer> spans;

    public StockSpanner() {
        prices = new Stack<>();
        spans = new Stack<>();
    }

    public int next(int price) {
        int span = 1;
        while (!prices.isEmpty() && prices.peek() <= price) {
            prices.pop();
            span += spans.pop();
        }
        prices.push(price);
        spans.push(span);
        return span;
    }
}


# 2 but this one give's TLE
import java.util.Stack;

class StockSpanner {
    Stack<Integer> stack;

    public StockSpanner() {
        stack = new Stack<>();
    }
    
    public int next(int price) {
        stack.push(price);
        return find(price);
    }

    public int find(int price,map<Integer,Integer){
        int count = 0;

        if(stack.isEmpty()){
            return count;
        }

        if(stack.peek()<=price){
            int num = stack.pop();
            count++;
            count += find(price);
            stack.push(num);
        }
        return count;
    }
}


Code Segment 1: Efficient Implementation
In the first code example, two stacks (prices and spans) are used to store the prices of stocks and their corresponding spans. The next(int price) function is the core operation and determines the span of the stock price that was just added
Time Complexity:

The amortized time complexity for each call to next() is O(1), considering that each price is pushed and popped once.

The worst-case time complexity for a single call can be O(n) in the scenario where all elements are popped from the stack, but this is balanced out by fewer operations in other calls.


Code Segment 2: Inefficient Recursive Implementation

Time Complexity:

The worst-case time complexity for next() is O(n^2) where n is the number of elements in the stack. This complexity arises because each next() call can lead to a full traversal of the stack in the find() method, and this traversal is repeated for each element added.
